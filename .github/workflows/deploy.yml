name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  buildImage:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Build Docker image
      run: |
        IMAGE_TAG=$(git rev-parse --short HEAD)
        REPO_NAME=$(basename ${{ github.repository }})
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        docker build -t ghcr.io/mb1tel/$REPO_NAME:$IMAGE_TAG .

    - name: Set IMAGE_TAG Output  # ✅ Thêm id để đặt output IMAGE_TAG
      id: set_image_tag
      run: echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Log in to Docker registry
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image
      run: |
        docker push ghcr.io/mb1tel/$REPO_NAME:$IMAGE_TAG
        docker tag ghcr.io/mb1tel/$REPO_NAME:$IMAGE_TAG ghcr.io/mb1tel/$REPO_NAME:latest
        docker push ghcr.io/mb1tel/$REPO_NAME:latest

  deploy:
    needs: buildImage
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.buildImage.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - uses: Azure/k8s-set-context@v4
      with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Create Kubernetes Secret General
      run: |
        kubectl delete secret hooksapi-secret -n production --ignore-not-found
        kubectl create secret generic hooksapi-secret \
          --from-literal=PORT="${{ secrets.INSTANCE_PORT }}" \
          --from-literal=REDIS_HOST="${{ secrets.REDIS_HOST }}" \
          --from-literal=REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
          -n production

    - name: Restore K8s Files
      run: |
        echo "${{ secrets.K8S_TAR_BASE64 }}" | base64 --decode | tar -xzf -

    - name: Debug K8s Extract
      run: ls -lah

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/

    - name: Ensure IMAGE_TAG is set
      run: |
        if [ -z "${{ env.IMAGE_TAG }}" ]; then
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        fi

    - name: Debug IMAGE_TAG
      run: echo "IMAGE_TAG is ${{ env.IMAGE_TAG }}"

    - name: Update Kubernetes Deployment
      run: |
        DEPLOYMENT_NAME=$(basename ${{ github.repository }})-deployment
        CONTAINER_NAME=$(basename ${{ github.repository }})
        kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=ghcr.io/mb1tel/$CONTAINER_NAME:${{ env.IMAGE_TAG }} -n production    
